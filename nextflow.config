// config defaults
params {

    // workflow options
    outdir                     = '$baseDir/results'
    publish_dir_mode           = 'copy'

    // data format
    data_format {
        exposure = ".txt.gz"
        outcome = ".txt.gz"
    }

    // default job options
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // general workflow parameters
    wald_only = false
    p_cutoff = 5e-8

    // plink options
    plink {
        memory_gb = 5  // amount of memory given to plink via --memory argument
        clump_r2 = 0.16
        clump_kb = 10000
    }
}

// load base.config by default for all pipelines
includeConfig 'conf/base.config'

// load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// profiles for various environments
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }

    // currently allows docker but can be expanded to other environment
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        process.container      = "jackgisby/mr-nextflow"
    }

    // variables for unit testing
    test      {includeConfig 'tests/test.config'}
}

// prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

manifest {
    name            = 'jackgisby/multi_exposure_mr'
    author          = 'Jack Gisby'
    homePage        = 'https://github.com/jackgisby/multi_exposure_mr'
    description     = 'Mendelian Randomisation pipeline for multiple exposures.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '0.1'
}

// Function to ensure that resource requirements don't go beyond a maximum limit (from nf-core)
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
